{"version":3,"sources":["sw.js","index.js"],"names":["self","addEventListener","event","waitUntil","preLoad","caches","open","then","cache","addAll","console","log","respondWith","checkResponse","request","catch","returnFromCache","addToCache","Promise","fulfill","reject","fetch","response","status","url","put","match","matching","h1","document","querySelector","submit","send","message","email","method","headers","body","json","res","setInterval","_","style","color","window","navigator","vibrate"],"mappings":";AAGAA,KAAKC,iBAAiB,UAAW,SAASC,GACxCA,EAAMC,UAAUC,OAGlB,IAAIA,EAAU,WAELC,OAAAA,OAAOC,KAAK,sBAAsBC,KAAK,SAASC,GAE9CA,OAAAA,EAAMC,OAAO,CAAC,kBAIzBT,KAAKC,iBAAiB,QAAS,SAASC,GACtCQ,QAAQC,IAAI,0DACZT,EAAMU,YAAYC,EAAcX,EAAMY,SAASC,MAAM,WAC5CC,OAAAA,EAAgBd,EAAMY,YAE/BZ,EAAMC,UAAUc,EAAWf,EAAMY,YAGnC,IAAID,EAAgB,SAASC,GACpB,OAAA,IAAII,QAAQ,SAASC,EAASC,GACnCC,MAAMP,GAASP,KAAK,SAASe,GACJ,MAApBA,EAASC,OACVJ,EAAQG,GAERF,KAEDA,MAIHH,EAAa,SAASH,GACjBT,OAAAA,OAAOC,KAAK,sBAAsBC,KAAK,SAAUC,GAC/Ca,OAAAA,MAAMP,GAASP,KAAK,SAAUe,GAE5Bd,OADPE,QAAQC,IAAI,oCAAoCW,EAASE,KAClDhB,EAAMiB,IAAIX,EAASQ,QAK5BN,EAAkB,SAASF,GACtBT,OAAAA,OAAOC,KAAK,sBAAsBC,KAAK,SAAUC,GAC/CA,OAAAA,EAAMkB,MAAMZ,GAASP,KAAK,SAAUoB,GACvC,OAACA,GAA+B,KAAnBA,EAASJ,OAGhBI,EAFAnB,EAAMkB,MAAM;;;;AChB1B,aAhCA,IAAA,EAAA,EAAA,QAAA,SAgCA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA/BA,QAAA,iBAEA,IAAIE,EAAKC,SAASC,cAAc,MAC5BC,EAASF,SAASC,cAAc,WASpC,SAASE,IACHC,IAAAA,EAAUJ,SAASC,cAAc,YACjCI,EAAQL,SAASC,cAAc,UACnCpB,QAAQC,IAAI,YACZU,MAAM,WAAY,CAChBc,OAAQ,OACRC,QAAS,CACS,eAAA,qCAElBC,KAAeH,SAAAA,OAAAA,EAAiBD,aAAAA,OAAAA,KAE/B1B,KAAK,SAAAe,GAAYA,OAAAA,EAASgB,SAC1B/B,KAAK,SAAAgC,GAAO7B,OAAAA,QAAQC,IAAI4B,KAlB7BC,YAAY,SAAAC,GACVb,EAAGc,MAAMC,MAA2B,eAAlBf,EAAGc,MAAMC,MAAyB,QAAU,cAC9DC,OAAOC,UAAUC,QAAQ,MACxB,KAoBHf,EAAO9B,iBAAiB,QAAS+B,IAEjC,EAAA,EAAA","file":"tech.37e6abaa.map","sourceRoot":"..","sourcesContent":["//This is the service worker with the combined offline experience (Offline page + Offline copy of pages)\n\n//Install stage sets up the offline page in the cache and opens a new cache\nself.addEventListener('install', function(event) {\n  event.waitUntil(preLoad());\n});\n\nvar preLoad = function(){\n\n  return caches.open('pwabuilder-offline').then(function(cache) {\n\n    return cache.addAll(['index.html']);\n  });\n}\n\nself.addEventListener('fetch', function(event) {\n  console.log('[PWA Builder] The service worker is serving the asset.');\n  event.respondWith(checkResponse(event.request).catch(function() {\n    return returnFromCache(event.request)}\n  ));\n  event.waitUntil(addToCache(event.request));\n});\n\nvar checkResponse = function(request){\n  return new Promise(function(fulfill, reject) {\n    fetch(request).then(function(response){\n      if(response.status !== 404) {\n        fulfill(response)\n      } else {\n        reject()\n      }\n    }, reject)\n  });\n};\n\nvar addToCache = function(request){\n  return caches.open('pwabuilder-offline').then(function (cache) {\n    return fetch(request).then(function (response) {\n      console.log('[PWA Builder] add page to offline'+response.url)\n      return cache.put(request, response);\n    });\n  });\n};\n\nvar returnFromCache = function(request){\n  return caches.open('pwabuilder-offline').then(function (cache) {\n    return cache.match(request).then(function (matching) {\n     if(!matching || matching.status == 404) {\n       return cache.match('index.html')\n     } else {\n       return matching\n     }\n    });\n  });\n};\n","import registerServiceWorker from \"./sw\"\nimport \"./styles.sass\"\n\nlet h1 = document.querySelector('h1')\nlet submit = document.querySelector('#submit')\n\n\nsetInterval(_=> {\n  h1.style.color = (h1.style.color == 'transparent' ? 'white' : 'transparent');\n  window.navigator.vibrate(100)\n}, 500)\n\n\nfunction send() {\n  let message = document.querySelector('#message')\n  let email = document.querySelector('#email')\n  console.log('ran send')\n  fetch('/contact', {\n    method: \"POST\", \n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: `email=${email}&message=${message}`\n  })\n    .then(response => response.json())\n    .then(res => console.log(res))\n}\n\n\n\nsubmit.addEventListener('click', send)\n\nregisterServiceWorker()\n\n\n\n"]}